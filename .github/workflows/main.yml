name: RDP

on:
  workflow_dispatch:

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable RDP and Firewall
        run: |
          # Enable Remote Desktop (disabling NLA to simplify connections from RDP clients)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force

          # Ensure firewall rule exists for port 3389
          netsh advfirewall firewall delete rule name="GitHub-RDP" 2>$null
          netsh advfirewall firewall add rule name="GitHub-RDP" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User (expires in 30 days)
        id: create_user
        run: |
          # Generate random password (PowerShell Core compatible)
          $upper   = 65..90    | ForEach-Object {[char]$_}
          $lower   = 97..122   | ForEach-Object {[char]$_}
          $number  = 48..57    | ForEach-Object {[char]$_}
          $special = (33..47 + 58..64 + 91..96 + 123..126) | ForEach-Object {[char]$_}
          $allChars = $upper + $lower + $number + $special
          $password = -join ((1..16) | ForEach-Object { $allChars | Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Create or update local user 'RDP'
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name "RDP" -Password $securePass
          } else {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires:$false
          }

          # Add to Remote Desktop Users (do not give admin rights)
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          # Expire in 30 days
          $expireDate = (Get-Date).AddDays(30)
          net user RDP /expires:$($expireDate.ToString("MM/dd/yyyy"))

          # Export values to GITHUB_ENV
          "`"RDP_PASSWORD=$password`"" | Out-File -FilePath $env:GITHUB_ENV -Append
          "`"RDP_EXPIRE=$expireDate`""  | Out-File -FilePath $env:GITHUB_ENV -Append

      # --- Try to download & start LocalXpose (may fail if URL changes) ---
      - name: Download LocalXpose (try latest release)
        run: |
          $ok = $false
          $url = "https://github.com/localxpose/localxpose/releases/latest/download/loclx-windows-amd64.zip"
          Write-Host "Attempting to download LocalXpose from: $url"
          try {
            Invoke-WebRequest -Uri $url -OutFile loclx.zip -ErrorAction Stop
            Expand-Archive loclx.zip -DestinationPath loclx_extracted -Force
            # Try common executable names
            $exe = Get-ChildItem -Path loclx_extracted -Recurse -Filter "loclx*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($exe) {
              Move-Item $exe.FullName .\loclx.exe -Force
              $ok = $true
            } else {
              # maybe the zip contains loclx.exe at root
              if (Test-Path .\loclx.exe) { $ok = $true }
            }
          } catch {
            Write-Warning "LocalXpose download failed: $($_.Exception.Message)"
          }
          if ($ok) {
            Write-Host "LocalXpose downloaded."
            "`"LOCLX_AVAILABLE=true`"" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            Write-Host "LocalXpose not available; continuing to PageKite fallback."
            "`"LOCLX_AVAILABLE=false`"" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Start LocalXpose Tunnel (if available)
        if: env.LOCLX_AVAILABLE == 'true'
        run: |
          Start-Process -NoNewWindow -FilePath "$PWD\loclx.exe" -ArgumentList "tcp --port 3389" -RedirectStandardOutput loclx.log
          Start-Sleep -Seconds 12
          $output = Get-Content loclx.log -Raw -ErrorAction SilentlyContinue
          $addrLine = ($output -split "`n" | Select-String -Pattern "tcp://").ToString().Trim()
          if ($addrLine) {
            $addr = $addrLine.Trim()
            "`"LOCLX_ADDR=$addr`"" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "LocalXpose tunnel address: $addr"
          } else {
            Write-Warning "LocalXpose started but no address found in log."
          }

      # --- PageKite (always start) ---
      - name: Download PageKite
        run: |
          Invoke-WebRequest https://pagekite.net/pk/pagekite.py -OutFile pagekite.py -ErrorAction Stop

      - name: Start PageKite Tunnel
        run: |
          $random = Get-Random -Minimum 10000 -Maximum 99999
          $sub = "rdp-$random"
          "`"PAGEKITE_SUB=$sub`"" | Out-File -FilePath $env:GITHUB_ENV -Append
          # Start PageKite (runs in background and writes to log)
          Start-Process -NoNewWindow -FilePath "python" -ArgumentList "pagekite.py 3389 $sub.pagekite.me" -RedirectStandardOutput pagekite.log
          Start-Sleep -Seconds 10
          Write-Host "PageKite started for host: $sub.pagekite.me"

      - name: Gather Connection Info + Write artifact
        run: |
          $localIPs = (Get-NetIPAddress -AddressFamily IPv4 `
                       | Where-Object { $_.IPAddress -notlike '127.*' -and $_.IPAddress -notlike '169.254.*' -and $_.AddressState -eq 'Preferred' } `
                       | Select-Object -ExpandProperty IPAddress) -join ", "
          if (-not $localIPs) { $localIPs = "No usable IPv4 detected" }

          $lines = @()
          $lines += "RDP Username: RDP"
          $lines += "RDP Password: $env:RDP_PASSWORD"
          $lines += "Expires On : $env:RDP_EXPIRE"
          $lines += "Local IPv4 : $localIPs"
          if ($env:LOCLX_ADDR) { $lines += "LocalXpose : $env:LOCLX_ADDR" } else { $lines += "LocalXpose : (not available)" }
          if ($env:PAGEKITE_SUB) { $lines += "PageKite   : $env:PAGEKITE_SUB.pagekite.me:3389" } else { $lines += "PageKite   : (not started)" }

          $outFile = "RDP_INFO.txt"
          $lines | Out-File -FilePath $outFile -Encoding UTF8 -Force
          Write-Host "=== RDP INFO ==="
          Get-Content $outFile | ForEach-Object { Write-Host $_ }
          Write-Host "================"
          # Upload artifact via step below (artifact uploader step requires file to exist)

      - name: Upload RDP info artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-info
          path: RDP_INFO.txt

      - name: Keep Alive
        run: |
          Write-Host "RDP session active. Leave workflow running (cancel workflow to stop)."
          while ($true) { Start-Sleep -Seconds 300 }
